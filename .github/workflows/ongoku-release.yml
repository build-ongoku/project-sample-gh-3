# # # # # # # # # # # # # # # # # # # # # #
# This file has been generated by Ongoku. #
# DO NOT edit this file.                  #
# # # # # # # # # # # # # # # # # # # # # #

name: Ongoku Workflow

# Change this number for a dummy commit to trigger the workflow
# 1.0.0

on:
    push:
        branches:
            - main
    schedule:
        - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
    build-deploy-dev-cloud:
        name: Build and Deploy to Dev Cloud
        runs-on: ubuntu-latest
        env:
            LOCAL_DEPLOY_IDENTIFIER: samplegh3
            LOCAL_GOKU_DOCKER_IMAGE: ghcr.io/build-ongoku/goku:latest
            LOCAL_GOKU_LOG_LEVEL: info
            LOCAL_KUBECONFIG_FILE: /home/runner/.kube/config
        steps:
            # Step: Validate Github secrets before running: DOTENV_KEY, GITHUB_NAME
            - name: "Validate Github secrets"
              run: |
                # Define an associative array with secret names and their values
                declare -A required_secrets
                required_secrets=(
                  ["DOTENV_KEY"]="${{ secrets.DOTENV_KEY }}"
                )
                # Loop through the map and check each secret
                for name in "${!required_secrets[@]}"; do
                  value="${required_secrets[$name]}"
                  if [ -z "$value" ]; then
                    echo "$name is not set in the Github secrets"
                    exit 1
                  fi
                done

            # Step: Checkout code
            - name: "Setup - Guthub Code Checkout"
              uses: actions/checkout@v4

            # Step: Set up Node
            - name: "Setup - Install Node (Pre-requisites: ongoku, dotenv-vault)"
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            # Step: Get the .env file using dotenv-vault
            - name: "Setup - Environment Variables (dotenv-vault)"
              run: |
                cd infra/.goku-include/static/dotenv/shared
                npx dotenv-vault@latest decrypt ${{ secrets.DOTENV_KEY }} > .env

            # Step: Load environment variables from .env
            - name: "Setup - Load environment variables from .env file"
              uses: cardinalby/export-env-action@v2
              with:
                envFile: 'infra/.goku-include/static/dotenv/shared/.env'
                mask: true

            # Step: Read base64 encoded KUBECONFIG_CONTENTS_B64 value from .env file, decode it and save it at /home/runner/.kube/config
            - name: "Setup - Kubectl config"
              run: |
                mkdir -p $(dirname ${{ env.LOCAL_KUBECONFIG_FILE }})
                echo ${{ env.KUBECONFIG_CONTENTS_B64 }} | base64 --decode > ${{ env.LOCAL_KUBECONFIG_FILE }}

            # Step: Set up Prettier
            - name: "Setup - Install Corepack + Prettier (Pre-requisites: ongoku)"
              run: |
                npm install -g corepack
                corepack enable
                npm install -g prettier

            # Step: Install Ongoku
            - name: "Setup - Install Ongoku"
              run: |
                curl -sSL https://github.com/build-ongoku/public-releases/releases/download/latest/goku_install.sh | bash

            # Step: Ongoku Info
            - name: "Info - Ongoku"
              run: |
                goku version

            # Step: Check kubectl
            - name: "Info - Kubectl Nodes"
              run: kubectl get nodes -n ongoku

            # Step: Login to GitHub Container Registry
            - name: "Setup - Github Container Registry - Auth"
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ env.GHCR_USERNAME }}
                  password: ${{ env.GHCR_PAT }}

            # Step: Set up Docker Buildx
            - name: "Setup - Docker Buildx"
              uses: docker/setup-buildx-action@v3
              with:
                  driver: docker-container
                  install: true

            # Step: Pull the Docker image with the goku binary
            - name: "Setup - Pull image (goku:latest)"
              run: docker pull ghcr.io/build-ongoku/goku:latest

            # Step: Generate app code
            - name: "Ongoku - Generate code and build"
              env:
                YARN_ENABLE_IMMUTABLE_INSTALLS: false
              run: |
                goku --log-level=${{ env.LOCAL_GOKU_LOG_LEVEL }} \
                  deploy build \
                  --license ${{ env.ONGOKU_LICENSE }} \
                  --deploy-identifier ${{ env.LOCAL_DEPLOY_IDENTIFIER }}

            # Step: Build the docker image
            - name: Ongoku - Build and push docker image
              run: |
                goku --log-level=${{ env.LOCAL_GOKU_LOG_LEVEL }} \
                  deploy docker-image \
                  --license ${{ env.ONGOKU_LICENSE }} \
                  --deploy-identifier ${{ env.LOCAL_DEPLOY_IDENTIFIER }}

            # Step: Generate K8s Deployment file
            # - Note: Add any additional env variables that need to be passed to the dev-cloud deployment should be added here
            - name: Ongoku - Generate K8s Deployment file
              run: |
                goku --log-level=${{ env.LOCAL_GOKU_LOG_LEVEL }} \
                  deploy k8s-generate \
                  --license ${{ env.ONGOKU_LICENSE }} \
                  --deploy-identifier ${{ env.LOCAL_DEPLOY_IDENTIFIER }} \
                  --env-file=none
            
            # Step: Apply K8s Deployment file
            - name: Ongoku - Apply K8s Deployment file
              run: |
                goku --log-level=${{ env.LOCAL_GOKU_LOG_LEVEL }} \
                  deploy k8s-apply \
                  --license ${{ env.ONGOKU_LICENSE }} \
                  --deploy-identifier ${{ env.LOCAL_DEPLOY_IDENTIFIER }}
